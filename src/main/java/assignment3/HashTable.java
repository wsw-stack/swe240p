package assignment3;

import org.junit.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class HashTable {
    List<List<String>> content;

    public HashTable() {
        this.content = new ArrayList<>();
        // will use a hash table with the size of 10
        for(int i = 0; i < 10; i++) {
            this.content.add(new ArrayList<>());
        }
    }

    public int hash(String string) {
        int hashCode = 0;
        // hash code here is generated by adding the indices of the letters
        // e.g a=0, b=1, etc
        for(char c: string.toLowerCase().toCharArray()) {
            hashCode += c - 'a';
        }
        return hashCode;
    }

    public void insert(String string) {
        int hashCode = hash(string);
        this.content.get(hashCode % 10).add(string);
    }

    public int size() {
        int totalSize = 0;
        for(int i = 0; i < 10; i++){
            totalSize += this.content.get(i).size();
        }
        return totalSize;
    }

    // sort the word alphabetically
    // etc uci -> ciu
    public String sortWord(String word) {
        char[] charArray = word.toCharArray();
        Arrays.sort(charArray);
        return new String(charArray);
    }

    public int getCount(String fileName) {
        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
            String line;
            while ((line = br.readLine()) != null) {
                // get the words out using regular expression (numbers will be ignored)
                String[] words = line.split("[^a-zA-Z]+");

                // 处理每个单词
                for (String word : words) {
                    if (!word.isEmpty()) {
                        int hashCode = hash(word);
                        word = sortWord(word); // sort by alphabetical order
                        if(!content.get(hashCode % 10).contains(word)) {
                            insert(word);
                        }
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return size();
    }

    @Test
    public void testHashTable() {
        HashTable hashTable = new HashTable();
        hashTable.insert("hello");
        hashTable.insert("uci");
        hashTable.insert("ICU"); // an anagram of "uci"
        hashTable.insert("python");
        hashTable.insert("ponthy");

        // should expect the same output
        System.out.println(hashTable.hash("uci"));
        System.out.println(hashTable.hash("icu"));
        // even if there are conflicts, it should still return 5
        System.out.println(hashTable.size());
    }

    @Test
    public void testGetCount() {
        System.out.println(getCount("src/pride-and-prejudice.txt"));
    }
}
